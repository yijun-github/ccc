---
# tasks file for create-instances

# Create a security group
# - name: Create a security group
#   os_security_group:
#     name: '{{ item.name }}'
#     description: '{{ item.description }}'
#     state: present
#   loop: '{{ security_groups }}'

# - name: Create a list of security group names
#   set_fact:
#     sg_names: '{{ sg_names|default([]) + [ item.name ] }}'
#   loop: '{{ security_groups }}'

# - debug:
#     msg: "Security group(s) {{ sg_names }} have been created."

# Create security group rules
# - name: Create security group rules
#   os_security_group_rule:
#     security_group: '{{ item.name }}'
#     protocol: '{{ item.protocol }}'
#     port_range_min: '{{ item.port_range_min }}'
#     port_range_max: '{{ item.port_range_max }}'
#     remote_ip_prefix: '{{ item.remote_ip_prefix }}'
#     state: present
#   loop: '{{ security_groups }}'

# Create an instance on NeCTAR
- name: Create an instance
  os_server:
    name: '{{ item.name }}'
    image: '{{ instance_image }}'
    key_name: '{{ instance_key_name }}'
    flavor: '{{ instance_flavor }}'
    availability_zone: '{{ availability_zone }}'
    security_groups: '{{instance_security_rule}}'
    volumes: '{{ item.volumes }}'
    auto_floating_ip: yes
    wait: yes
    timeout: 600
    state: present
  loop: '{{ instances }}'
  register: os_instance

- debug:
    msg: "Instance {{ item.openstack.name }} has been created. IP address is {{ item.openstack.public_v4 }}"
  loop: '{{ os_instance.results }}'
  when: item.openstack is defined

# - name: Wait for connection
#   ansible.builtin.wait_for:
#     host: "{{ item['server']['addresses'][instance_network][0]['addr'] }}"
#     port: 22
#     timeout: 1800
#     search_regex: OpenSSH
#   loop: "{{ os_instance.results }}"
#   when: item.server is defined

 

- name: create file
  become: yes
  template:
    src: ansible-hosts.j2
    dest: "{{ wm_inventory_file }}"
